; THIS FILE AUTOGENERATED FROM asm-nseel-x86-gcc.c by a2x64.php

%define NSEEL_RAM_BLOCKS 128
%define NSEEL_RAM_ITEMSPERBLOCK 65536
%define EEL_F_SIZE 8
%define TARGET_X64
SECTION .text
%if 0
%define SAVE_STACK "pushl %ebp\nmovl %esp, %ebp\nandl $-16, %esp\n"
%define RESTORE_STACK "leave\n"
%else
%define SAVE_STACK
%define RESTORE_STACK
%endif


global nseel_asm_1pdd
nseel_asm_1pdd:

	  SAVE_STACK
%ifdef TARGET_X64
      movq xmm0, [rax]
	  sub rsp, 128
     mov rdi, qword 0xFEFEFEFEFEFEFEFE
%ifdef AMD64ABI
     mov r15, rsi
     call rdi
     mov rsi, r15
     movq [r15], xmm0
%else
     call rdi
     movq [rsi], xmm0
%endif
     add rsp, 128
%else
              sub rsp, 8  ;  keep stack aligned 
					    push dword [rax+4]  ;  push parameter 
					    push dword [rax]     ;  push the rest of the parameter 
              mov rdi, qword 0xFEFEFEFEFEFEFEFE
					    call rdi
					    fstp qword [rsi]  ;  store result 
					    add rsp, 16
%endif
					    mov rax, rsi  ;  set return value 
					    add rsi, 8  ;  advance worktab ptr 
  	RESTORE_STACK
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_1pdd_end
nseel_asm_1pdd_end:


global nseel_asm_2pdd
nseel_asm_2pdd:

	SAVE_STACK
%ifdef TARGET_X64
    movq xmm1, [rax]
    movq xmm0, [rdi]
	sub rsp, 128
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
%ifdef AMD64ABI
    mov r15, rsi
    call rdi
    mov rsi, r15
    movq [r15], xmm0
%else
    call rdi
    movq [rsi], xmm0
%endif
    add rsp, 128
%else
					    push dword [rax+4]  ;  push parameter 
					    push dword [rax]     ;  push the rest of the parameter 
					    push dword [rdi+4]  ;  push parameter 
					    push dword [rdi]     ;  push the rest of the parameter 
              mov rdi, qword 0xFEFEFEFEFEFEFEFE
					    call rdi
					    fstp qword [rsi]  ;  store result 
					    add rsp, 16
%endif
					    mov rax, rsi  ;  set return value 
					    add rsi, 8  ;  advance worktab ptr 
	RESTORE_STACK
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_2pdd_end
nseel_asm_2pdd_end:


global nseel_asm_2pdds
nseel_asm_2pdds:

	SAVE_STACK
%ifdef TARGET_X64
    movq xmm1, [rax]
    movq xmm0, [rdi]
	sub rsp, 128
    mov rax, qword 0xFEFEFEFEFEFEFEFE
%ifdef AMD64ABI
    mov r15, rsi
    mov r14, rdi
    call rax
    mov rsi, r15
    movq [r14], xmm0
    mov rax, r14  ;  set return value 
%else
    call rax
    movq [rdi], xmm0
    mov rax, rdi  ;  set return value 
%endif
    sub rsp, 128
%else
					    push dword [rax+4]  ;  push parameter 
					    push dword [rax]     ;  push the rest of the parameter 
					    push dword [rdi+4]  ;  push parameter 
					    push dword [rdi]     ;  push the rest of the parameter 
              mov rax, qword 0xFEFEFEFEFEFEFEFE
					    call rax
					    fstp qword [rdi]  ;  store result 
					    add rsp, 16
    mov rax, rdi  ;  set return value 
%endif
RESTORE_STACK
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_2pdds_end
nseel_asm_2pdds_end:


global nseel_asm_2pp
nseel_asm_2pp:

SAVE_STACK
%ifdef TARGET_X64

%ifdef AMD64ABI
    mov r15, rsi
     ;  rdi is first parameter 
    mov rsi, rax
    sub rsp, 128
              mov rax, qword 0xFEFEFEFEFEFEFEFE
					    call rax
    mov rsi, r15
    movq [r15], xmm0
%else
              mov rcx, rdi
              mov rdx, rax
              sub rsp, 128
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    call rdi
    movq [rsi], xmm0
%endif
    add rsp, 128
%else
              sub rsp, 8  ;  keep stack aligned 
              push rax  ;  push parameter 
					    push rdi     ;  push second parameter 
              mov rdi, qword 0xFEFEFEFEFEFEFEFE
					    call rdi
					    fstp qword [rsi]  ;  store result 
					    add rsp, 16
%endif
					    mov rax, rsi  ;  set return value 
					    add rsi, 8  ;  advance worktab ptr 
RESTORE_STACK
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_2pp_end
nseel_asm_2pp_end:


global nseel_asm_1pp
nseel_asm_1pp:

SAVE_STACK
%ifdef TARGET_X64
%ifdef AMD64ABI
    mov r15, rsi
    mov rdi, rax
    sub rsp, 128
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    call rax
    mov rsi, r15
    movq [r15], xmm0
%else
              mov rcx, rax
              sub rsp, 128
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    call rdi
    movq [rsi], xmm0
%endif
    add rsp, 128
%else
              sub rsp, 12  ;  keep stack aligned 
					    push rax  ;  push parameter 
              mov rdi, qword 0xFEFEFEFEFEFEFEFE
              call rdi
					    fstp qword [rsi]  ;  store result 
					    add rsp, 16
%endif
					    mov rax, rsi  ;  set return value 
					    add rsi, 8  ;  advance worktab ptr 
RESTORE_STACK
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_1pp_end
nseel_asm_1pp_end:


global nseel_asm_exec2
nseel_asm_exec2:

      
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_exec2_end
nseel_asm_exec2_end:


global nseel_asm_invsqrt
nseel_asm_invsqrt:

    fld qword [rax]
    mov rdx, 0x5f3759df
    fst dword [rsi]
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    sub rcx, rcx
    fmul qword [rax]
%else
    fmul qword [qword 0xFEFEFEFEFEFEFEFE]
%endif
    mov ecx, dword [rsi]
    sar rcx, 1
    sub rdx, rcx
    mov dword [rsi], edx
    fmul dword [rsi]
    fmul dword [rsi]
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    fadd qword [rax]
%else
    fadd qword [qword 0xFEFEFEFEFEFEFEFE]
%endif
    fmul dword [rsi]
    mov rax, rsi
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_invsqrt_end
nseel_asm_invsqrt_end:


global nseel_asm_sin
nseel_asm_sin:

    fld qword [rax]
    fsin
    mov rax, rsi
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sin_end
nseel_asm_sin_end:


global nseel_asm_cos
nseel_asm_cos:

    fld qword [rax]
    fcos
    mov rax, rsi
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_cos_end
nseel_asm_cos_end:


global nseel_asm_tan
nseel_asm_tan:

    fld qword [rax]
    fptan
    mov rax, rsi
    fstp st0
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_tan_end
nseel_asm_tan_end:


global nseel_asm_sqr
nseel_asm_sqr:

	fld qword [rax]
    fmul st0, st0
    mov rax, rsi
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sqr_end
nseel_asm_sqr_end:


global nseel_asm_sqrt
nseel_asm_sqrt:

    fld qword [rax]
    fabs
    fsqrt
    mov rax, rsi
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sqrt_end
nseel_asm_sqrt_end:


global nseel_asm_log
nseel_asm_log:

    fldln2
    fld qword [rax]
    mov rax, rsi
    fyl2x
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_log_end
nseel_asm_log_end:


global nseel_asm_log10
nseel_asm_log10:

    fldlg2
    fld qword [rax]
    mov rax, rsi
    fyl2x
    fstp qword [rsi]
    add rsi, 8

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_log10_end
nseel_asm_log10_end:


global nseel_asm_abs
nseel_asm_abs:

    fld qword [rax]
    fabs
    mov rax, rsi
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_abs_end
nseel_asm_abs_end:


global nseel_asm_assign
nseel_asm_assign:
%ifdef TARGET_X64

    mov rdx, qword [rax]
    mov rcx, rdx
    shr rdx, 32
    and rdx, 0x7FF00000
    jz label_0
    cmp rdx, 0x7FF00000
    je label_0
    jmp label_1
label_0:
    
    sub rcx, rcx
label_1:
    
    mov qword [rdi], rcx
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else
%if EEL_F_SIZE == 8

    mov edx, dword [rax+4]
    mov ecx, dword [rax]
    and rdx, 0x7ff00000
    jz label_2    ;  if exponent=zero, zero
    cmp rdx, 0x7ff00000
    je label_2  ;  if exponent=all 1s, zero
    mov edx, dword [rax+4]  ;  reread
    jmp label_3
label_2:
    
    sub rcx, rcx
    sub rdx, rdx
label_3:
    
    mov dword [rdi], ecx
    mov dword [rdi+4], edx
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

    mov ecx, dword [rax]
    mov dword [rdi], ecx
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif
%endif


global nseel_asm_assign_end
nseel_asm_assign_end:


global nseel_asm_add
nseel_asm_add:

    fld qword [rax]
    fadd qword [rdi]
    mov rax, rsi
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_add_end
nseel_asm_add_end:


global nseel_asm_add_op
nseel_asm_add_op:

    fld qword [rax]
    fadd qword [rdi]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_add_op_end
nseel_asm_add_op_end:


global nseel_asm_sub
nseel_asm_sub:

    fld qword [rdi]
    fsub qword [rax]
    mov rax, rsi
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sub_end
nseel_asm_sub_end:


global nseel_asm_sub_op
nseel_asm_sub_op:

    fld qword [rdi]
    fsub qword [rax]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sub_op_end
nseel_asm_sub_op_end:


global nseel_asm_mul
nseel_asm_mul:

    fld qword [rdi]
    fmul qword [rax]
    mov rax, rsi
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_mul_end
nseel_asm_mul_end:


global nseel_asm_mul_op
nseel_asm_mul_op:

    fld qword [rax]
    fmul qword [rdi]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_mul_op_end
nseel_asm_mul_op_end:


global nseel_asm_div
nseel_asm_div:

    fld qword [rdi]
    fdiv qword [rax]
    mov rax, rsi
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_div_end
nseel_asm_div_end:


global nseel_asm_div_op
nseel_asm_div_op:

    fld qword [rdi]
    fdiv qword [rax]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_div_op_end
nseel_asm_div_op_end:


global nseel_asm_mod
nseel_asm_mod:

    fld qword [rdi]
    fld qword [rax]
    fabs
    fisttp dword [rsi]
    fabs
    fisttp dword [rsi+4]
    xor rdx, rdx
%ifdef TARGET_X64
    sub rax, rax
%endif
    cmp dword [rsi], 0
    je label_4  ;  skip devide, set return to 0
    mov eax, dword [rsi+4]
    div dword [rsi]
label_4:
    
    mov dword [rsi], edx
    fild dword [rsi]
    mov rax, rsi
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_mod_end
nseel_asm_mod_end:


global nseel_asm_mod_op
nseel_asm_mod_op:

    fld qword [rdi]
    fld qword [rax]
    fabs
    fisttp dword [rdi]
    fabs
    fisttp dword [rsi]
%ifdef TARGET_X64
    sub rax, rax
%endif
    xor rdx, rdx
    cmp dword [rdi], 0
    je label_5  ;  skip devide, set return to 0
    mov eax, dword [rsi]
    div dword [rdi]
label_5:
    
    mov dword [rdi], edx
    fild dword [rdi]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_mod_op_end
nseel_asm_mod_op_end:


global nseel_asm_or
nseel_asm_or:

    fld qword [rdi]
    fld qword [rax]
    mov rax, rsi
    fisttp qword [rsi]
    fisttp qword [rsi+8]
%ifdef TARGET_X64
    mov rdi, qword [rsi+8]
    or qword [rsi], rdi
%else
    mov edi, dword [rsi+8]
    mov ecx, dword [rsi+12]
    or dword [rsi], edi
    or dword [rsi+4], ecx
%endif
    fild qword [rsi]
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_or_end
nseel_asm_or_end:


global nseel_asm_or_op
nseel_asm_or_op:

    fld qword [rdi]
    fld qword [rax]
    fisttp qword [rdi]
    fisttp qword [rsi]
%ifdef TARGET_X64
    mov rax, qword [rsi]
    or qword [rdi], rax
%else
    mov eax, dword [rsi]
    mov ecx, dword [rsi+4]
    or dword [rdi], eax
    or dword [rdi+4], ecx
%endif
    fild qword [rdi]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_or_op_end
nseel_asm_or_op_end:


global nseel_asm_and
nseel_asm_and:

    fld qword [rdi]
    fld qword [rax]
    mov rax, rsi
    fisttp qword [rsi]
    fisttp qword [rsi+8]
%ifdef TARGET_X64
    mov rdi, qword [rsi+8]
    and qword [rsi], rdi
%else
    mov edi, dword [rsi+8]
    mov ecx, dword [rsi+12]
    and dword [rsi], edi
    and dword [rsi+4], ecx
%endif
    fild qword [rsi]
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_and_end
nseel_asm_and_end:


global nseel_asm_and_op
nseel_asm_and_op:

    fld qword [rdi]
    fld qword [rax]
    fisttp qword [rdi]
    fisttp qword [rsi]
%ifdef TARGET_X64
    mov rax, qword [rsi]
    and qword [rdi], rax
%else
    mov eax, dword [rsi]
    mov ecx, dword [rsi+4]
    and dword [rdi], eax
    and dword [rdi+4], ecx
%endif
    fild qword [rdi]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_and_op_end
nseel_asm_and_op_end:


global nseel_asm_uplus
nseel_asm_uplus:

      
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_uplus_end
nseel_asm_uplus_end:


global nseel_asm_uminus
nseel_asm_uminus:

%if EEL_F_SIZE == 8
    mov ecx, dword [rax]
    mov edi, dword [rax+4]
    mov dword [rsi], ecx
    xor rdi, 0x80000000
    mov rax, rsi
    mov dword [rsi+4], edi
    add rsi, 8
%else
    mov ecx, dword [rax]
    xor rcx, 0x80000000
    mov rax, rsi
    mov dword [rsi], ecx
    add rsi, 4
%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_uminus_end
nseel_asm_uminus_end:


global nseel_asm_sign
nseel_asm_sign:


%ifdef TARGET_X64


    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov rcx, qword [rax]
    mov rdx, 0x7FFFFFFFFFFFFFFF
    test rcx, rdx
    jz label_6
    shr rcx, 60
    and rcx, 8
    add rcx, rdi
    mov rax, rsi
    add rsi, 8
    mov rdi, qword [rcx]
    mov qword [rax], rdi
label_6:
	


%else

    mov rdi, qword 0xFEFEFEFEFEFEFEFE
%if EEL_F_SIZE == 8
    mov ecx, dword [rax+4]
    mov edx, dword [rax]
    test rdx, qword 0xFEFEFEFEFEFEFEFE
    jnz label_7
%else
    mov ecx, dword [rax]
%endif
     ;  high dword (minus sign bit) is zero
    test rcx, 0x7FFFFFFF
    jz label_8  ;  zero zero, return the value passed directly
label_7:
    
%if EEL_F_SIZE == 8
	shr rcx, 28
%else
	shr rcx, 29
%endif

    and rcx, 8
    add rcx, rdi

    mov rax, rsi
    add rsi, 8

    mov edi, dword [rcx]
%if EEL_F_SIZE == 8
    mov edx, dword [rcx+4]
%endif
    mov dword [rax], edi
%if EEL_F_SIZE == 8
    mov dword [rax+4], edx
%endif
label_8:
	

%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sign_end
nseel_asm_sign_end:


global nseel_asm_bnot
nseel_asm_bnot:

    fld qword [rax]
    fabs
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    fcomp qword [rax]  ; [g_closefact]
%else
    fcomp qword [qword 0xFEFEFEFEFEFEFEFE]  ; [g_closefact]
%endif
    fstsw ax
    test rax, 256
    mov rax, rsi
    jz label_9
    fld1
    jmp label_10
label_9:
    
    fldz
label_10:
    
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_bnot_end
nseel_asm_bnot_end:


global nseel_asm_if
nseel_asm_if:

    fld qword [rax]
    fabs
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    fcomp qword [rax]  ; [g_closefact]
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    mov qword [rsi], rax  ;  conversion script will extend these out to full len
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    mov qword [rsi+8], rax
    fstsw ax
    shr rax, 5
    and rax, 8
    mov rax, qword [rax+rsi]
    sub rsp, 8
%else
    fcomp qword [qword 0xFEFEFEFEFEFEFEFE]  ; [g_closefact]
    mov dword [rsi], qword 0xFEFEFEFEFEFEFEFE
    mov dword [rsi+4], qword 0xFEFEFEFEFEFEFEFE
    fstsw ax
    shr rax, 6
    and rax, 4
    mov eax, dword [rax+rsi]
%endif
    call rax
%ifdef TARGET_X64
    add rsp, 8
%endif

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_if_end
nseel_asm_if_end:


global nseel_asm_repeat
nseel_asm_repeat:

    fld qword [rax]
    fisttp dword [rsi]
%ifdef TARGET_X64  ;  safe not sure if movl ecx will zero the high word
    xor rcx, rcx
%endif
    mov ecx, dword [rsi]
    cmp rcx, 1
    jl label_11
    cmp rcx, 10000000
    jl label_12
    mov rcx, 10000000
label_12:

      mov rdx, qword 0xFEFEFEFEFEFEFEFE
      sub rsp, 8  ;  keep stack aligned -- note this is required on x64 too!
      push rsi  ;  revert back to last temp workspace
      push rcx
      call rdx
      pop rcx
      pop rsi
      add rsp, 8  ;  keep stack aligned -- also required on x64
    dec rcx
    jnz label_12
label_11:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_repeat_end
nseel_asm_repeat_end:


global nseel_asm_repeatwhile
nseel_asm_repeatwhile:

    mov rcx, 10000000
label_13:

      mov rdx, qword 0xFEFEFEFEFEFEFEFE
      sub rsp, 8  ;  keep stack aligned -- required on x86 and x64
      push rsi  ;  revert back to last temp workspace
      push rcx
      call rdx
      pop rcx
      pop rsi
      add rsp, 8  ;  keep stack aligned -- required on x86 and x64 
      fld qword [rax]
	  fabs
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    fcomp qword [rax]  ; [g_closefact]
%else
    fcomp qword [qword 0xFEFEFEFEFEFEFEFE]  ; [g_closefact]
%endif
      fstsw ax
	  test rax, 256
	  jnz label_14
    dec rcx
    jnz label_13
label_14:
	
	mov rax, rsi
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_repeatwhile_end
nseel_asm_repeatwhile_end:


global nseel_asm_band
nseel_asm_band:

    fld qword [rax]
    fabs
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    fcomp qword [rax]  ; [g_closefact]
%else
    fcomp qword [qword 0xFEFEFEFEFEFEFEFE]  ; [g_closefact]
%endif
    fstsw ax
    test rax, 256
    jnz label_15  ;  if Z, then we are nonzero

        mov rcx, qword 0xFEFEFEFEFEFEFEFE
%ifdef TARGET_X64
    sub rsp, 8
%endif
        call rcx
%ifdef TARGET_X64
    add rsp, 8
%endif
    	fld qword [rax]
    	fabs
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    fcomp qword [rax]  ; [g_closefact]
%else
    fcomp qword [qword 0xFEFEFEFEFEFEFEFE]  ; [g_closefact]
%endif
    	fstsw ax
        test rax, 256
	jnz label_15
	fld1
	jmp label_16

label_15:

    fldz
label_16:


    mov rax, rsi
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_band_end
nseel_asm_band_end:


global nseel_asm_bor
nseel_asm_bor:

    fld qword [rax]
    fabs
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    fcomp qword [rax]  ; [g_closefact]
%else
    fcomp qword [qword 0xFEFEFEFEFEFEFEFE]  ; [g_closefact]
%endif
    fstsw ax
    test rax, 256
    jz label_17  ;  if Z, then we are nonzero

        mov rcx, qword 0xFEFEFEFEFEFEFEFE
%ifdef TARGET_X64
    sub rsp, 8
%endif
        call rcx
%ifdef TARGET_X64
    add rsp, 8
%endif
    	fld qword [rax]
    	fabs
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    fcomp qword [rax]  ; [g_closefact]
%else
    fcomp qword [qword 0xFEFEFEFEFEFEFEFE]  ; [g_closefact]
%endif
    	fstsw ax
        test rax, 256
	jz label_17
	fldz
	jmp label_18

label_17:

    fld1
label_18:


    mov rax, rsi
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_bor_end
nseel_asm_bor_end:


global nseel_asm_equal
nseel_asm_equal:

    fld qword [rax]
    fsub qword [rdi]
    fabs
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    fcomp qword [rax]  ; [g_closefact]
%else
    fcomp qword [qword 0xFEFEFEFEFEFEFEFE]  ; [g_closefact]
%endif
    fstsw ax
    test rax, 256
    mov rax, rsi
    jz label_19
    fld1
    jmp label_20
label_19:
    
    fldz
label_20:
    
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_equal_end
nseel_asm_equal_end:


global nseel_asm_notequal
nseel_asm_notequal:

    fld qword [rax]
    fsub qword [rdi]
    fabs
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    fcomp qword [rax]  ; [g_closefact]
%else
    fcomp qword [qword 0xFEFEFEFEFEFEFEFE]  ; [g_closefact]
%endif
    fstsw ax
    test rax, 256
    mov rax, rsi
    jnz label_21
    fld1
    jmp label_22
label_21:
    
    fldz
label_22:
    
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_notequal_end
nseel_asm_notequal_end:


global nseel_asm_below
nseel_asm_below:

    fld qword [rdi]
    fcomp qword [rax]
    fstsw ax
    test rax, 256
    mov rax, rsi
    jz label_23
    fld1
    jmp label_24
label_23:
    
    fldz
label_24:
    
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_below_end
nseel_asm_below_end:


global nseel_asm_beloweq
nseel_asm_beloweq:

    fld qword [rax]
    fcomp qword [rdi]
    fstsw ax
    test rax, 256
    mov rax, rsi
    jnz label_25
    fld1
    jmp label_26
label_25:
    
    fldz
label_26:
    
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_beloweq_end
nseel_asm_beloweq_end:


global nseel_asm_above
nseel_asm_above:

    fld qword [rax]
    fcomp qword [rdi]
    fstsw ax
    test rax, 256
    mov rax, rsi
    jz label_27
    fld1
    jmp label_28
label_27:
    
    fldz
label_28:
    
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_above_end
nseel_asm_above_end:


global nseel_asm_aboveeq
nseel_asm_aboveeq:

    fld qword [rdi]
    fcomp qword [rax]
    fstsw ax
    test rax, 256
    mov rax, rsi
    jnz label_29
    fld1
    jmp label_30
label_29:
    
    fldz
label_30:
    
    fstp qword [rsi]
    add rsi, 8
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_aboveeq_end
nseel_asm_aboveeq_end:


global nseel_asm_min
nseel_asm_min:

    fld qword [rdi]
    fcomp qword [rax]
    push rax
    fstsw ax
    test rax, 256
    pop rax
    jz label_31
    mov rax, rdi
label_31:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_min_end
nseel_asm_min_end:


global nseel_asm_max
nseel_asm_max:

    fld qword [rdi]
    fcomp qword [rax]
    push rax
    fstsw ax
    test rax, 256
    pop rax
    jnz label_32
    mov rax, rdi
label_32:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_max_end
nseel_asm_max_end:


global _asm_generic3parm
_asm_generic3parm:

%ifdef TARGET_X64

%ifdef AMD64ABI

    mov r15, rsi
    mov rdx, rdi  ;  third parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context

    mov rsi, rcx  ;  second parameter = parm
    mov rcx, rax  ;  fourth parameter = parm
    mov rax, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rax

    mov rsi, r15
    add rsp, 128

%else
    mov rdx, rcx  ;  second parameter = parm
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov r8, rdi  ;  third parameter = parm
    mov r9, rax  ;  fourth parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rdi
    add rsp, 128
%endif

%else
SAVE_STACK
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    push rax  ;  push parameter
    push rdi  ;  push parameter
    push rcx  ;  push parameter
    push rdx  ;  push context pointer
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    call rdi
    add rsp, 16
RESTORE_STACK
%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic3parm_end
_asm_generic3parm_end:


global _asm_generic3parm_retd
_asm_generic3parm_retd:

%ifdef TARGET_X64
%ifdef AMD64ABI
    mov r15, rsi
    mov rdx, rdi  ;  third parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rsi, rcx  ;  second parameter = parm
    mov rcx, rax  ;  fourth parameter = parm
    mov rax, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rax
    add rsp, 128
    mov rsi, r15
    mov rax, r15
    movq [r15], xmm0
    add rsi, 8
%else
    mov rdx, rcx  ;  second parameter = parm
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov r8, rdi  ;  third parameter = parm
    mov r9, rax  ;  fourth parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rdi
    add rsp, 128
    movq [rsi], xmm0
    mov rax, rsi
    add rsi, 8
%endif
%else
SAVE_STACK
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    push rax  ;  push parameter
    push rdi  ;  push parameter
    push rcx  ;  push parameter
    push rdx  ;  push context pointer
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    call rdi
    mov rax, rsi
	  fstp qword [rsi]
   	add rsi, 8
    add rsp, 16
RESTORE_STACK
%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic3parm_retd_end
_asm_generic3parm_retd_end:


global _asm_generic2parm
_asm_generic2parm:

%ifdef TARGET_X64

%ifdef AMD64ABI
    mov r15, rsi
    mov rsi, rdi  ;  second parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rdx, rax  ;  third parameter = parm
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rcx
    mov rsi, r15
    add rsp, 128
%else
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rdx, rdi  ;  second parameter = parm
    mov r8, rax  ;  third parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rdi
    add rsp, 128
%endif
%else
SAVE_STACK
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    sub rsp, 4  ;  keep stack aligned
    push rax  ;  push parameter
    push rdi  ;  push parameter
    push rdx  ;  push context pointer
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    call rdi
    add rsp, 16
RESTORE_STACK
%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic2parm_end
_asm_generic2parm_end:


global _asm_generic2parm_retd
_asm_generic2parm_retd:

%ifdef TARGET_X64
%ifdef AMD64ABI
    mov r15, rsi
    mov rsi, rdi  ;  second parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rdx, rax  ;  third parameter = parm
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rcx
    mov rsi, r15
    add rsp, 128
    movq [r15], xmm0
    mov rax, r15
    add rsi, 8
%else
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rdx, rdi  ;  second parameter = parm
    mov r8, rax  ;  third parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rdi
    add rsp, 128
    movq [rsi], xmm0
    mov rax, rsi
    add rsi, 8
%endif
%else
SAVE_STACK
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    push rax  ;  push parameter
    push rdi  ;  push parameter
    push rcx  ;  push parameter
    push rdx  ;  push context pointer
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    call rdi
    mov rax, rsi
	  fstp qword [rsi]
   	add rsi, 8
    add rsp, 16
RESTORE_STACK
%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic2parm_retd_end
_asm_generic2parm_retd_end:


global _asm_generic1parm
_asm_generic1parm:

%ifdef TARGET_X64
%ifdef AMD64ABI
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov r15, rsi
    mov rsi, rax  ;  second parameter = parm
    sub rsp, 128
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    call rcx
    mov rsi, r15
    add rsp, 128
%else
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rdx, rax  ;  second parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rdi
    add rsp, 128
%endif
%else
SAVE_STACK
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    sub rsp, 8  ;  keep stack aligned
    push rax  ;  push parameter
    push rdx  ;  push context pointer
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    call rdi
    add rsp, 16
RESTORE_STACK
%endif

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic1parm_end
_asm_generic1parm_end:


global _asm_generic1parm_retd
_asm_generic1parm_retd:

%ifdef TARGET_X64
%ifdef AMD64ABI
    mov r15, rsi
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rsi, rax  ;  second parameter = parm
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rcx
    mov rsi, r15
    add rsp, 128
    movq [r15], xmm0
    mov rax, r15
    add rsi, 8
%else
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rdx, rax  ;  second parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rdi
    add rsp, 128
    movq [rsi], xmm0
    mov rax, rsi
    add rsi, 8
%endif
%else
SAVE_STACK
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    sub rsp, 8  ;  keep stack aligned
    push rax  ;  push parameter
    push rdx  ;  push context pointer
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    call rdi
	  mov rax, rsi
	  fstp qword [rsi]
	  add rsi, 8
    add rsp, 16
RESTORE_STACK
%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic1parm_retd_end
_asm_generic1parm_retd_end:


global _asm_megabuf
_asm_megabuf:

SAVE_STACK

%ifdef TARGET_X64


%ifdef AMD64ABI

    mov r15, rsi
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter = context pointer
    fld qword [rax]
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    fadd qword [rdx]
    fisttp dword [r15]
    xor rsi, rsi
    mov esi, dword [r15]  ;  r15 = esi (from above)
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    sub rsp, 128
    call rdx
    mov rsi, r15
    add rsp, 128
    and rax, rax
    jnz label_33
    mov rax, r15
    mov qword [rsi], 0
    add rsi, 8
label_33:
    

%else
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter = context pointer
    fld qword [rax]
	mov rdx, qword 0xFEFEFEFEFEFEFEFE
    fadd qword [rdx]
    fisttp dword [rsi]
    xor rdx, rdx
    mov edx, dword [rsi]
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
	sub rsp, 128
    call rdi
	add rsp, 128
    and rax, rax
    jnz label_34
    mov rax, rsi
    mov qword [rsi], 0
    add rsi, 8
label_34:
    
%endif


%else
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    fld qword [rax]
    fadd qword [qword 0xFEFEFEFEFEFEFEFE]
    fisttp dword [rsi]
    sub rsp, 8  ;  keep stack aligned
    push dword [rsi]  ;  parameter
    push rdx  ;  push context pointer
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    call rdi
    add rsp, 16
    and rax, rax
    jnz label_35
    mov rax, rsi
    mov dword [rsi], 0
%if EEL_F_SIZE == 8
    mov dword [rsi+4], 0
%endif
    add rsi, 8
label_35:
    


%endif

RESTORE_STACK

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_megabuf_end
_asm_megabuf_end:
%ifdef TARGET_X64


global win64_callcode
win64_callcode:

%ifdef AMD64ABI
		mov rax, rdi
%else
		mov rax, rcx
%endif

		push rbx
		push rbp
%ifndef AMD64ABI
		push rdi
		push rsi
		push r12
		push r13
%endif
		push r14  ;  on AMD64ABI, we'll use r14/r15 to save edi/esi
		push r15
		call rax
		pop r15
		pop r14
%ifndef AMD64ABI
		pop r13
		pop r12
		pop rsi
		pop rdi
		fclex
%endif
		pop rbp
		pop rbx
		ret
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif
